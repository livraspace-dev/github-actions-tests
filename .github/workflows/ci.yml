name: CI Workflow

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_DASHBOARD_KEY }}
      SLACK_WEBHOOK: ${{ secrets.CYPRESSNOTIFIER }}
      CYPRESS_PROJECT_ID: 'ivi6aw'  # Reemplaza con tu Project ID de Cypress

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Verify Cypress installation
        run: npx cypress --version

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run Cypress tests with recording
        if: github.event_name != 'workflow_dispatch'
        continue-on-error: true
        run: |
          npx cypress run --record --key $CYPRESS_RECORD_KEY | tee cypress_output.txt

      - name: Print Cypress output for debugging
        if: github.event_name != 'workflow_dispatch'
        run: cat cypress_output.txt

      - name: Extract Cypress Dashboard URL
        if: github.event_name != 'workflow_dispatch'
        run: |
          CLEAN_OUTPUT=$(sed -r 's/\x1B\[[0-9;]*[mG]//g' cypress_output.txt)
          CYPRESS_URL=$(echo "$CLEAN_OUTPUT" | grep 'Run URL:' | sed 's/.*Run URL:\s*//; s/\s*$//')
          echo "CYPRESS_URL es $CYPRESS_URL"
          echo "CYPRESS_DASHBOARD_URL=$CYPRESS_URL" >> $GITHUB_ENV
        shell: bash

      - name: Get latest Cypress run URL
        if: github.event_name == 'workflow_dispatch'
        env:
          CYPRESS_API_TOKEN: ${{ secrets.CYPRESS_API_TOKEN }}
          CYPRESS_PROJECT_ID: ${{ env.CYPRESS_PROJECT_ID }}
        run: |
          set -x  # Habilita el modo de depuración
          # Construir la consulta GraphQL
          QUERY=$(jq -n --arg projectId "$CYPRESS_PROJECT_ID" '{
            "query": "query { project(id: \"\($projectId)\") { runs(first: 1, orderBy: {direction: DESC, field: CREATED_AT}) { edges { node { runUrl status id } } } } }"
          }')
          echo "GraphQL Query: $QUERY"

          # Realizar la solicitud a la API
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CYPRESS_API_TOKEN" \
            -d "$QUERY" \
            https://cloud.cypress.io/graphql)
          echo "API Response: $RESPONSE"

          # Verificar si hay errores en la respuesta
          ERRORS=$(echo "$RESPONSE" | jq -r '.errors')
          if [ "$ERRORS" != "null" ]; then
            echo "Error al obtener los datos de la API de Cypress:"
            echo "$ERRORS"
            exit 1
          fi

          # Imprimir los datos de los runs
          RUNS_DATA=$(echo "$RESPONSE" | jq '.data.project.runs')
          echo "Runs data: $RUNS_DATA"

          # Extraer el runUrl
          RUN_URL=$(echo "$RESPONSE" | jq -r '.data.project.runs.edges[0].node.runUrl // empty')
          if [ -z "$RUN_URL" ]; then
            echo "No se encontró runUrl en la respuesta de la API."
            RUN_URL="null"
          else
            echo "Último RUN_URL: $RUN_URL"
          fi

          # Establecer la variable de entorno para usarla en pasos posteriores
          echo "CYPRESS_DASHBOARD_URL=$RUN_URL" >> $GITHUB_ENV
        shell: bash

      - name: Get latest release URL
        run: |
          LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.html_url')
          echo "LATEST_RELEASE_URL=$LATEST_RELEASE_URL" >> $GITHUB_ENV
        shell: bash
        continue-on-error: true

      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK: ${{ secrets.CYPRESSNOTIFIER }}
          LATEST_RELEASE_URL: ${{ env.LATEST_RELEASE_URL }}
          CYPRESS_DASHBOARD_URL: ${{ env.CYPRESS_DASHBOARD_URL }}
        run: |
          if [ -z "$CYPRESS_DASHBOARD_URL" ] || [ "$CYPRESS_DASHBOARD_URL" = "null" ]; then
            MESSAGE="El flujo de trabajo de CI se ha completado, pero no se pudo obtener la URL del último test en Cypress."
          else
            MESSAGE="El flujo de trabajo de CI se ha completado. Revisa los resultados del último test: $CYPRESS_DASHBOARD_URL"
          fi

          if [ -n "$LATEST_RELEASE_URL" ]; then
            MESSAGE="$MESSAGE y el último release: $LATEST_RELEASE_URL"
          fi

          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK
        shell: bash
